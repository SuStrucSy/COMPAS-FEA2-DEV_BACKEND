import os
from compas.datastructures import Mesh

import compas_fea2
from compas_fea2.model import Model, Part
from compas_fea2.model import ElasticIsotropic, ShellSection
from compas_fea2.problem import LoadCombination
from compas_fea2.results import DisplacementFieldResults
from compas_fea2_opensees import TEMP

compas_fea2.set_backend("compas_fea2_opensees")

# ==============================================================================
# Create a shell model
# ==============================================================================
# Define the plate dimensions and mesh density
lx = 5
ly = 1
nx = 50
ny = 10
plate = Mesh.from_meshgrid(lx, nx, ly, ny)
thk = 0.02

# ==============================================================================
# COMPAS_FEA2
# ==============================================================================
# Initialize the model
mdl = Model(name="mesh_plate")
mat = ElasticIsotropic(name='mat_elastic', E=75*10**9, v=0.3, density=2700)
sec = ShellSection(t=thk, material=mat)

# Create a deformable part from the mesh
prt = Part.shell_from_compas_mesh(mesh=plate, section=sec, name="shell")
mdl.add_part(prt)

# Set boundary conditions at both ends of the shell
fixed_coords = [
  (0.200000, 0.000000, 0.000000),
  (0.100000, 0.000000, 0.000000),
  (0.000000, 0.000000, 0.000000),
  (0.000000, 0.100000, 0.000000),
  (0.000000, 0.200000, 0.000000),
  (0.000059, 0.800007, 0.000000),
  (0.000068, 0.900007, 0.000000),
  (0.000077, 1.000007, 0.000000),
  (0.100077, 0.999998, 0.000000),
  (0.200077, 0.999989, 0.000000),
  (4.800000, 0.000000, 0.000000),
  (4.900000, 0.000000, 0.000000),
  (5.000000, 0.200000, 0.000000),
  (5.000000, 0.100000, 0.000000),
  (5.000000, 0.000000, 0.000000),
  (4.999990, 1.000005, 0.000000),
  (5.000000, 0.900006, 0.000000),
  (5.000009, 0.800006, 0.000000),
  (4.899991, 0.999996, 0.000000),
  (4.799991, 0.999987, 0.000000)
]

fixed_nodes = []
for coord in fixed_coords:
    nid = prt.find_closest_nodes_to_point(coord, single=True)
    fixed_nodes.append(nid)
mdl.add_fix_bc(nodes=fixed_nodes)

# Print model summary
# mdl.summary()
# mdl.show(show_bcs=0.0001)


# ==============================================================================
# Define the problem
# ==============================================================================
prb = mdl.add_problem(name="mid_load")
stp = prb.add_static_step()
stp.combination = LoadCombination.SLS()

# Add a load in the middle of the grid
loaded_node_coords = [
  (3.000000, 1.000000, 0.000000),
  (2.900000, 1.000000, 0.000000),
  (2.800000, 1.000000, 0.000000),
  (2.700000, 1.000000, 0.000000),
  (2.600000, 1.000000, 0.000000),
  (2.500000, 1.000000, 0.000000),
  (2.400000, 1.000000, 0.000000),
  (2.300000, 1.000000, 0.000000),
  (2.200000, 1.000000, 0.000000),
  (2.100000, 1.000000, 0.000000),
  (2.000000, 1.000000, 0.000000),
  (2.000048, 0.899841, 0.000000),
  (2.100048, 0.899841, 0.000000),
  (2.200048, 0.899841, 0.000000),
  (2.300048, 0.899841, 0.000000),
  (2.400048, 0.899841, 0.000000),
  (2.500048, 0.899841, 0.000000),
  (2.600048, 0.899841, 0.000000),
  (2.700048, 0.899841, 0.000000),
  (2.800048, 0.899841, 0.000000),
  (2.900048, 0.899841, 0.000000),
  (3.000048, 0.899841, 0.000000),
  (2.000044, 0.799841, 0.000000),
  (2.100044, 0.799841, 0.000000),
  (2.200044, 0.799841, 0.000000),
  (2.300044, 0.799841, 0.000000),
  (2.400044, 0.799841, 0.000000),
  (2.500044, 0.799841, 0.000000),
  (2.600044, 0.799841, 0.000000),
  (2.700044, 0.799841, 0.000000),
  (2.800044, 0.799841, 0.000000),
  (2.900044, 0.799841, 0.000000),
  (3.000044, 0.799841, 0.000000),
  (2.000041, 0.699841, 0.000000),
  (2.100040, 0.699841, 0.000000),
  (2.200041, 0.699841, 0.000000),
  (2.300040, 0.699841, 0.000000),
  (2.400041, 0.699841, 0.000000),
  (2.500041, 0.699841, 0.000000),
  (2.600040, 0.699841, 0.000000),
  (2.700041, 0.699841, 0.000000),
  (2.800040, 0.699841, 0.000000),
  (2.900041, 0.699841, 0.000000),
  (3.000041, 0.699841, 0.000000),
  (2.000037, 0.599841, 0.000000),
  (2.100037, 0.599841, 0.000000),
  (2.200037, 0.599841, 0.000000),
  (2.300037, 0.599841, 0.000000),
  (2.400037, 0.599841, 0.000000),
  (2.500037, 0.599841, 0.000000),
  (2.600037, 0.599841, 0.000000),
  (2.700037, 0.599841, 0.000000),
  (2.800037, 0.599841, 0.000000),
  (2.900037, 0.599841, 0.000000),
  (3.000037, 0.599841, 0.000000),
  (2.000034, 0.499841, 0.000000),
  (2.100034, 0.499841, 0.000000),
  (2.200034, 0.499841, 0.000000),
  (2.300034, 0.499841, 0.000000),
  (2.400034, 0.499841, 0.000000),
  (2.500034, 0.499841, 0.000000),
  (2.600034, 0.499841, 0.000000),
  (2.700034, 0.499841, 0.000000),
  (2.800034, 0.499841, 0.000000),
  (2.900034, 0.499841, 0.000000),
  (3.000034, 0.499841, 0.000000)
]
loaded_nodes = []
for coord in loaded_node_coords:
    nid = prt.find_closest_nodes_to_point(coord, single=True)
    loaded_nodes.append(nid)

stp.add_uniform_node_load(nodes=loaded_nodes, load_case="LL", x=0.0, y=-300, z=-100.0, xx=0.0, yy=0.0, zz=0.0)

# Define field outputs
stp.add_output(DisplacementFieldResults)

# ==============================================================================
# Run the analysis and show results
# ==============================================================================
# Analyze and extract results to SQLite database
prb.analyse_and_extract(problems=[prb], path=os.path.join(TEMP, prb.name), Verbose=True)
# Show deformed shape
stp.show_deformed(scale_results=1, show_original=0.2, show_bcs=0.0003, show_loads=0.05)
