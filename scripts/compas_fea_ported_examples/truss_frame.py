from compas_fea2.model import Model, Part, Node, TrussElement, ElasticIsotropic, TrussSection
from compas_fea2.problem import Problem, StaticStep, LoadCombination
from compas_fea2.results import DisplacementFieldResults, ReactionFieldResults, StressFieldResults
from compas_fea2_opensees import TEMP
import compas_fea2
import os

# Set the backend
compas_fea2.set_backend("compas_fea2_opensees")
mdl = Model(name="TrussFrame")
prt = mdl.add_part(Part(name="Truss-2"))
prt.ndm = 3
prt.ndf = 3

p = 7850
A1 = 0.0008
A2 = 0.0005
A3 = 0.0001

# Materials
steel = ElasticIsotropic(name="Steel", E=200000000000, v=0.3, density=p)

# Sections

mainTruss = TrussSection(name='sec_main', A=A1, material=steel)
diagonalTruss = TrussSection(name='sec_diag', A=A2, material=steel)
stays = TrussSection(name='sec_stays', A=A3, material=steel)

nodes_data = {
    0: (0.243596, 2.624894, 5.002196),
    1: (-4.312031, 8.337478, 0.0),
    2: (0.243596, 1.21068, 5.002196),
    3: (-4.312031, -4.501905, 0.0),
    4: (16.243596, 1.21068, 1.002196),
    5: (16.243596, 2.624894, 0.002196),
    6: (16.243596, 1.21068, 2.002196),
    7: (16.243596, 2.624894, 1.002196),
    8: (16.243596, 1.21068, 3.002196),
    9: (16.243596, 2.624894, 2.002196),
    10: (16.243596, 1.21068, 4.002196),
    11: (16.243596, 2.624894, 3.002196),
    12: (16.243596, 1.21068, 5.002196),
    13: (16.243596, 2.624894, 4.002196),
    14: (16.243596, 1.21068, 0.002196),
    15: (15.243596, 1.917787, 0.004518),
    16: (15.243596, 1.917787, 1.29509),
    17: (15.243596, 1.917787, 2.29509),
    18: (15.243596, 1.917787, 3.29509),
    19: (15.243596, 1.917787, 4.29509),
    20: (16.243596, 2.624894, 5.002196),
    21: (0.243596, 1.21068, 1.002196),
    22: (0.243596, 2.624894, 0.002196),
    23: (0.243596, 1.21068, 2.002196),
    24: (0.243596, 2.624894, 1.002196),
    25: (0.243596, 1.21068, 3.002196),
    26: (0.243596, 2.624894, 2.002196),
    27: (0.243596, 1.21068, 4.002196),
    28: (0.243596, 2.624894, 3.002196),
    29: (0.243596, 2.624894, 4.002196),
    30: (0.243596, 1.21068, 0.002196),
    31: (1.243596, 1.917787, 0.004518),
    32: (1.243596, 1.917787, 1.29509),
    33: (1.243596, 1.917787, 2.29509),
    34: (1.243596, 1.917787, 3.29509),
    35: (1.243596, 1.917787, 4.29509),
    36: (2.243596, 1.21068, 5.002196),
    37: (4.243596, 1.21068, 5.002196),
    38: (6.243596, 1.21068, 5.002196),
    39: (8.243596, 1.21068, 5.002196),
    40: (10.243596, 1.21068, 5.002196),
    41: (12.243596, 1.21068, 5.002196),
    42: (14.243596, 1.21068, 5.002196),
    43: (2.243596, 2.624894, 5.002196),
    44: (4.243596, 2.624894, 5.002196),
    45: (6.243596, 2.624894, 5.002196),
    46: (8.243596, 2.624894, 5.002196),
    47: (10.243596, 2.624894, 5.002196),
    48: (12.243596, 2.624894, 5.002196),
    49: (14.243596, 2.624894, 5.002196),
    50: (13.243596, 1.917787, 4.29509),
    51: (11.243596, 1.917787, 4.29509),
    52: (9.243596, 1.917787, 4.29509),
    53: (7.243596, 1.917787, 4.29509),
    54: (5.243596, 1.917787, 4.29509),
    55: (3.243596, 1.917787, 4.29509),
}

lines = [
    (0, 1), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11),
    (12, 13), (11, 8), (9, 6), (4, 7), (14, 5), (15, 14),
    (15, 4), (16, 4), (9, 17), (15, 5), (7, 15), (16, 7),
    (17, 8), (16, 9), (6, 16), (17, 6), (11, 17), (18, 11),
    (18, 8), (10, 18), (13, 18), (19, 10), (19, 13), (16, 15),
    (8, 6), (11, 9), (18, 17), (10, 8), (13, 11), (19, 18), (12, 10),
    (20, 13), (6, 4), (9, 7), (17, 16), (4, 14), (7, 5), (13, 10),
    (21, 22), (23, 24), (25, 26), (27, 28), (2, 29), (28, 25),
    (26, 23), (21, 24), (30, 22), (31, 30), (31, 21), (32, 21),
    (26, 33),
    (31, 22),
    (24, 31),
    (32, 24),
    (33, 25),
    (32, 26),
    (23, 32),
    (33, 23),
    (28, 33),
    (34, 28),
    (34, 25),
    (27, 34),
    (29, 34),
    (35, 27),
    (35, 29),
    (32, 31),
    (25, 23),
    (28, 26),
    (34, 33),
    (27, 25),
    (29, 28),
    (35, 34),
    (2, 27),
    (0, 29),
    (23, 21),
    (26, 24),
    (33, 32),
    (21, 30),
    (24, 22),
    (29, 27),
    (2, 36),
    (36, 37),
    (37, 38),
    (38, 39),
    (39, 40),
    (40, 41),
    (41, 42),
    (42, 12),
    (0, 43),
    (43, 44),
    (44, 45),
    (45, 46),
    (46, 47),
    (47, 48),
    (48, 49),
    (49, 20),
    (50, 19),
    (51, 50),
    (52, 51),
    (53, 52),
    (54, 53),
    (55, 54),
    (35, 55),
    (2, 35),
    (35, 36),
    (55, 37),
    (36, 55),
    (54, 38),
    (37, 54),
    (53, 39),
    (38, 53),
    (52, 40),
    (39, 52),
    (51, 41),
    (40, 51),
    (50, 42),
    (41, 50),
    (19, 12),
    (42, 19),
    (0, 35),
    (35, 43),
    (55, 44),
    (43, 55),
    (54, 45),
    (44, 54),
    (53, 46),
    (45, 53),
    (52, 47),
    (46, 52),
    (51, 48),
    (47, 51),
    (50, 49),
    (48, 50),
    (19, 20),
    (49, 19),
    (43, 2),
    (44, 36),
    (45, 37),
    (46, 38),
    (47, 39),
    (48, 40),
    (49, 41),
    (20, 42),
    (2, 0),
    (36, 43),
    (37, 44),
    (38, 45),
    (39, 46),
    (40, 47),
    (41, 48),
    (42, 49),
    (12, 20),
]

constrained_nodes_coordinates = [(-4.31203138797, -4.50190454813, 0.0),
(-4.31203138797, 8.33747825318, 0.0),
(0.243596487824, 1.21068007134, 0.00219637817533),
(0.243596487824, 2.62489363371, 0.00219637817533),
(1.24359648782, 1.91778685253, 0.00451802597678),
(15.2435964878, 1.91778685253, 0.00451802597678),
(16.2435964878, 1.21068007134, 0.00219637817533),
(16.2435964878, 2.62489363371, 0.00219637817533)]

loaded_nodes_coordinates = [(8.24359648782, 2.62489363371, 5.00219637818),
(8.24359648782, 1.21068007134, 5.00219637818),
(6.24359648782, 1.21068007134, 5.00219637818),
(6.24359648782, 2.62489363371, 5.00219637818),
(10.2435964878, 2.62489363371, 5.00219637818),
(10.2435964878, 1.21068007134, 5.00219637818)]

nodes = {}
for nid, xyz in nodes_data.items():
    nodes[nid] = prt.add_node(Node(name=nid, xyz=xyz))

iteration = 1
for nodes in lines:
    n1 = prt.find_closest_nodes_to_point(nodes_data[nodes[0]], single = True)
    n2 = prt.find_closest_nodes_to_point(nodes_data[nodes[1]], single = True)
    prt.add_element(TrussElement(name=str(iteration), nodes=[n1, n2], section=mainTruss))
    iteration += 1

for coords in constrained_nodes_coordinates:
    n = prt.find_closest_nodes_to_point(coords, single=True)
    mdl.add_fix_bc(n)

#mdl.show(show_bcs=0.0003)

prb = mdl.add_problem(Problem(name="TrussFrameAnalysis"))
stp = prb.add_step(StaticStep(name="StaticStep"))

stp.combination = LoadCombination.SLS()
for coords in loaded_nodes_coordinates:
    n = prt.find_closest_nodes_to_point(coords, single=True)
    stp.add_uniform_node_load(nodes=n, load_case="LL", x=0.0, y=0.0, z=-15500, xx=0.0, yy=0.0, zz=0.0)

stp.add_outputs([DisplacementFieldResults])
prb.analyse_and_extract(problems=[prb], path=os.path.join(TEMP, prb.name), Verbose=True)

stp.show_deformed(scale_results=10, show_original=0.1, show_bcs=0.0003, show_loads=0.0001)
