from compas_fea2.model import Model, Part, Node, BeamElement, ElasticIsotropic, BeamSection, RectangularSection, PipeSection
from compas_fea2.model.shapes import Circle
from compas_fea2.problem import Problem, StaticStep, LoadCombination
from compas_fea2.results import DisplacementFieldResults
from compas_fea2_opensees import TEMP
import compas_fea2
import os

'''
Author(s): Andrew Liew (github.com/andrewliew), Moosa Saboor (https://github.com/Moosa-Saboor)
Originally written/conceptualized for compas_fea by Andrew Liew, re-written completely for compas_fea2 by Moosa Saboor
'''

compas_fea2.set_backend("compas_fea2_opensees")
mdl = Model(name="Beam_Frame")
prt = mdl.add_part(Part(name="Beam_Frame_analysis"))

prt.ndm = 3
prt.ndf = 6
steel = ElasticIsotropic(name="Steel", E=200000000000, v=0.3, density=7850)

section_beam1 = PipeSection(r=0.1, t=0.005, material=steel)

nodes_data = \
{   1: (0.10000000000000001, 0.0, 2.0),
    2: (0.0, 0.0, 2.0),
    3: (0.20000000000000001, 0.0, 2.0),
    4: (0.29999999999999999, 0.0, 2.0),
    5: (0.40000000000000002, 0.0, 2.0),
    6: (0.5, 0.0, 2.0),
    7: (0.59999999999999998, 0.0, 2.0),
    8: (0.69999999999999996, 0.0, 2.0),
    9: (0.80000000000000004, 0.0, 2.0),
    10: (0.90000000000000002, 0.0, 2.0),
    11: (1.0, 0.0, 2.0),
    12: (1.1000000000000001, 0.0, 2.0),
    13: (1.2000000000000000, 0.0, 2.0),
    14: (1.3000000000000000, 0.0, 2.0),
    15: (1.3999999999999999, 0.0, 2.0),
    16: (1.5, 0.0, 2.0),
    17: (1.6000000000000001, 0.0, 2.0),
    18: (1.7000000000000000, 0.0, 2.0),
    19: (1.8000000000000000, 0.0, 2.0),
    20: (1.8999999999999999, 0.0, 2.0),
    21: (2.0, 0.0, 2.0),
    22: (2.1000000000000001, 0.0, 2.0),
    23: (2.2000000000000002, 0.0, 2.0),
    24: (2.2999999999999998, 0.0, 2.0),
    25: (2.3999999999999999, 0.0, 2.0),
    26: (2.5, 0.0, 2.0),
    27: (2.6000000000000001, 0.0, 2.0),
    28: (2.7000000000000002, 0.0, 2.0),
    29: (2.7999999999999998, 0.0, 2.0),
    30: (2.8999999999999999, 0.0, 2.0),
    31: (3.0, 0.0, 2.0),
    32: (3.1000000000000001, 0.0, 2.0),
    33: (3.2000000000000002, 0.0, 2.0),
    34: (3.2999999999999998, 0.0, 2.0),
    35: (3.3999999999999999, 0.0, 2.0),
    36: (3.5, 0.0, 2.0),
    37: (3.6000000000000001, 0.0, 2.0),
    38: (3.7000000000000002, 0.0, 2.0),
    39: (3.7999999999999998, 0.0, 2.0),
    40: (3.8999999999999999, 0.0, 2.0),
    41: (4.0, 0.0, 2.0),
    42: (4.0, 0.0, 1.8999999999999999),
    43: (4.0, 0.0, 1.8000000000000000),
    44: (4.0, 0.0, 1.7000000000000000),
    45: (4.0, 0.0, 1.6000000000000001),
    46: (4.0, 0.0, 1.5),
    47: (4.0, 0.0, 1.3999999999999999),
    48: (4.0, 0.0, 1.3000000000000000),
    49: (4.0, 0.0, 1.2000000000000000),
    50: (4.0, 0.0, 1.1000000000000001),
    51: (4.0, 0.0, 1.0),
    52: (4.0, 0.0, 0.90000000000000002),
    53: (4.0, 0.0, 0.80000000000000004),
    54: (4.0, 0.0, 0.69999999999999996),
    55: (4.0, 0.0, 0.59999999999999998),
    56: (4.0, 0.0, 0.5),
    57: (4.0, 0.0, 0.40000000000000002),
    58: (4.0, 0.0, 0.29999999999999999),
    59: (4.0, 0.0, 0.20000000000000001),
    60: (4.0, 0.0, 0.10000000000000001),
    61: (4.0, 0.0, 0.0),
    62: (0.0, 0.0, 1.8999999999999999),
    63: (0.0, 0.0, 1.8000000000000000),
    64: (0.0, 0.0, 1.7000000000000000),
    65: (0.0, 0.0, 1.6000000000000001),
    66: (0.0, 0.0, 1.5),
    67: (0.0, 0.0, 1.3999999999999999),
    68: (0.0, 0.0, 1.3000000000000000),
    69: (0.0, 0.0, 1.2000000000000000),
    70: (0.0, 0.0, 1.1000000000000001),
    71: (0.0, 0.0, 1.0),
    72: (0.0, 0.0, 0.90000000000000002),
    73: (0.0, 0.0, 0.80000000000000004),
    74: (0.0, 0.0, 0.69999999999999996),
    75: (0.0, 0.0, 0.59999999999999998),
    76: (0.0, 0.0, 0.5),
    77: (0.0, 0.0, 0.40000000000000002),
    78: (0.0, 0.0, 0.29999999999999999),
    79: (0.0, 0.0, 0.20000000000000001),
    80: (0.0, 0.0, 0.10000000000000001),
    81: (0.0, 0.0, 0.0)}

elements_data = \
{   1: (1, 2),
    2: (3, 1),
    3: (4, 3),
    4: (5, 4),
    5: (6, 5),
    6: (7, 6),
    7: (8, 7),
    8: (9, 8),
    9: (10, 9),
    10: (11, 10),
    11: (12, 11),
    12: (13, 12),
    13: (14, 13),
    14: (15, 14),
    15: (16, 15),
    16: (17, 16),
    17: (18, 17),
    18: (19, 18),
    19: (20, 19),
    20: (21, 20),
    21: (22, 21),
    22: (23, 22),
    23: (24, 23),
    24: (25, 24),
    25: (26, 25),
    26: (27, 26),
    27: (28, 27),
    28: (29, 28),
    29: (30, 29),
    30: (31, 30),
    31: (32, 31),
    32: (33, 32),
    33: (34, 33),
    34: (35, 34),
    35: (36, 35),
    36: (37, 36),
    37: (38, 37),
    38: (39, 38),
    39: (40, 39),
    40: (41, 40),
    41: (42, 41),
    42: (43, 42),
    43: (44, 43),
    44: (45, 44),
    45: (46, 45),
    46: (47, 46),
    47: (48, 47),
    48: (49, 48),
    49: (50, 49),
    50: (51, 50),
    51: (52, 51),
    52: (53, 52),
    53: (54, 53),
    54: (55, 54),
    55: (56, 55),
    56: (57, 56),
    57: (58, 57),
    58: (59, 58),
    59: (60, 59),
    60: (61, 60),
    61: (41, 40),
    62: (40, 39),
    63: (39, 38),
    64: (38, 37),
    65: (37, 36),
    66: (36, 35),
    67: (35, 34),
    68: (34, 33),
    69: (33, 32),
    70: (32, 31),
    71: (31, 30),
    72: (30, 29),
    73: (29, 28),
    74: (28, 27),
    75: (27, 26),
    76: (26, 25),
    77: (25, 24),
    78: (24, 23),
    79: (23, 22),
    80: (22, 21),
    81: (21, 20),
    82: (20, 19),
    83: (19, 18),
    84: (18, 17),
    85: (17, 16),
    86: (16, 15),
    87: (15, 14),
    88: (14, 13),
    89: (13, 12),
    90: (12, 11),
    91: (11, 10),
    92: (10, 9),
    93: (9, 8),
    94: (8, 7),
    95: (7, 6),
    96: (6, 5),
    97: (5, 4),
    98: (4, 3),
    99: (3, 1),
    100: (1, 2),
    101: (62, 2),
    102: (63, 62),
    103: (64, 63),
    104: (65, 64),
    105: (66, 65),
    106: (67, 66),
    107: (68, 67),
    108: (69, 68),
    109: (70, 69),
    110: (71, 70),
    111: (72, 71),
    112: (73, 72),
    113: (74, 73),
    114: (75, 74),
    115: (76, 75),
    116: (77, 76),
    117: (78, 77),
    118: (79, 78),
    119: (80, 79),
    120: (81, 80)}

nodes = {}
for nid, xyz in nodes_data.items():
    nodes[nid] = prt.add_node(Node(name=nid, xyz=xyz))

for eid, nodes in elements_data.items():
    n1 = prt.find_closest_nodes_to_point(nodes_data[nodes[0]], single = True)
    n2 = prt.find_closest_nodes_to_point(nodes_data[nodes[1]], single = True)
    prt.add_element(BeamElement(nodes=[n1, n2], section=section_beam1, frame=[1,1,1]))

pinned = prt.find_closest_nodes_to_point((0.0, 0.0, 0.0), single = True)
roller = prt.find_closest_nodes_to_point((4.0, 0.0, 0.0), single = True)

h_loaded_node = prt.find_closest_nodes_to_point((0.0, 0.0, 2.0), single = True)
v_loaded_node = prt.find_closest_nodes_to_point((2.0, 0.0, 2.0), single = True)

mdl.add_pin_bc(pinned)
mdl.add_pin_bc(roller)

#mdl.show()

prb = mdl.add_problem(Problem(name="BeamFrameAnalysis"))
stp = prb.add_step(StaticStep(name="StaticStep"))

stp.combination = LoadCombination.SLS()
stp.add_uniform_node_load(nodes=h_loaded_node, load_case="LL", x=4000.0, y=0.0, z=0.0, xx=0.0, yy=0.0, zz=0.0)
stp.add_uniform_node_load(nodes=v_loaded_node, load_case="LL", x=0.0, y=0.0, z=-6000, xx=0.0, yy=0.0, zz=0.0)

stp.add_outputs([DisplacementFieldResults])
prb.analyse_and_extract(problems=[prb], path=os.path.join(TEMP, prb.name), Verbose=True)

stp.show_deformed(scale_results=50, show_original=0.1, show_bcs=0.0003, show_loads=0.0001)
