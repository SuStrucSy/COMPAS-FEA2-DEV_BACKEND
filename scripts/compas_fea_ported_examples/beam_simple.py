from compas_fea2.model import Model, Part, Node, BeamElement, ElasticIsotropic, BeamSection, RectangularSection, PipeSection, CircularSection
from compas_fea2.model.shapes import Rectangle, Circle
from compas_fea2.problem import Problem, StaticStep, LoadCombination
from compas_fea2.results import DisplacementFieldResults, ReactionFieldResults, StressFieldResults
from compas_fea2_opensees import TEMP
import compas_fea2
import os

'''
Author(s): Andrew Liew (github.com/andrewliew), Moosa Saboor (https://github.com/Moosa-Saboor)
Originally written/conceptualized for compas_fea by Andrew Liew, re-written completely for compas_fea2 by Moosa Saboor
'''

compas_fea2.set_backend("compas_fea2_opensees")
mdl = Model(name="Beam_simple")
prt = mdl.add_part(Part(name="Beam_simple_analysis"))

prt.ndm = 3
prt.ndf = 6
steel = ElasticIsotropic(name='mat_elastic', E=20*10**9, v=0.3, density=1500)

section_beam1 = CircularSection(r=0.005, material=steel)

nodes_data = {0: (1.000000, 0.000000, 0.000000),
  1: (0.950000, 0.000000, 0.000000),
  2: (0.900000, 0.000000, 0.000000),
  3: (0.850000, 0.000000, 0.000000),
  4: (0.800000, 0.000000, 0.000000),
  5: (0.750000, 0.000000, 0.000000),
  6: (0.700000, 0.000000, 0.000000),
  7: (0.650000, 0.000000, 0.000000),
  8: (0.600000, 0.000000, 0.000000),
  9: (0.550000, 0.000000, 0.000000),
  10: (0.500000, 0.000000, 0.000000),
  11: (0.450000, 0.000000, 0.000000),
  12: (0.400000, 0.000000, 0.000000),
  13: (0.350000, 0.000000, 0.000000),
  14: (0.300000, 0.000000, 0.000000),
  15: (0.250000, 0.000000, 0.000000),
  16: (0.200000, 0.000000, 0.000000),
  17: (0.150000, 0.000000, 0.000000),
  18: (0.100000, 0.000000, 0.000000),
  19: (0.050000, 0.000000, 0.000000),
  20: (0.000000, 0.000000, 0.000000),
  21: (0.990000, 0.000000, 0.000000),
  22: (0.980000, 0.000000, 0.000000),
  23: (0.970000, 0.000000, 0.000000),
  24: (0.960000, 0.000000, 0.000000),
  25: (0.940000, 0.000000, 0.000000),
  26: (0.930000, 0.000000, 0.000000),
  27: (0.920000, 0.000000, 0.000000),
  28: (0.910000, 0.000000, 0.000000),
  29: (0.890000, 0.000000, 0.000000),
  30: (0.880000, 0.000000, 0.000000),
  31: (0.870000, 0.000000, 0.000000),
  32: (0.860000, 0.000000, 0.000000),
  33: (0.840000, 0.000000, 0.000000),
  34: (0.830000, 0.000000, 0.000000),
  35: (0.820000, 0.000000, 0.000000),
  36: (0.810000, 0.000000, 0.000000),
  37: (0.790000, 0.000000, 0.000000),
  38: (0.780000, 0.000000, 0.000000),
  39: (0.770000, 0.000000, 0.000000),
  40: (0.760000, 0.000000, 0.000000),
  41: (0.740000, 0.000000, 0.000000),
  42: (0.730000, 0.000000, 0.000000),
  43: (0.720000, 0.000000, 0.000000),
  44: (0.710000, 0.000000, 0.000000),
  45: (0.690000, 0.000000, 0.000000),
  46: (0.680000, 0.000000, 0.000000),
  47: (0.670000, 0.000000, 0.000000),
  48: (0.660000, 0.000000, 0.000000),
  49: (0.640000, 0.000000, 0.000000),
  50: (0.630000, 0.000000, 0.000000),
  51: (0.620000, 0.000000, 0.000000),
  52: (0.610000, 0.000000, 0.000000),
  53: (0.590000, 0.000000, 0.000000),
  54: (0.580000, 0.000000, 0.000000),
  55: (0.570000, 0.000000, 0.000000),
  56: (0.560000, 0.000000, 0.000000),
  57: (0.540000, 0.000000, 0.000000),
  58: (0.530000, 0.000000, 0.000000),
  59: (0.520000, 0.000000, 0.000000),
  60: (0.510000, 0.000000, 0.000000),
  61: (0.490000, 0.000000, 0.000000),
  62: (0.480000, 0.000000, 0.000000),
  63: (0.470000, 0.000000, 0.000000),
  64: (0.460000, 0.000000, 0.000000),
  65: (0.440000, 0.000000, 0.000000),
  66: (0.430000, 0.000000, 0.000000),
  67: (0.420000, 0.000000, 0.000000),
  68: (0.410000, 0.000000, 0.000000),
  69: (0.390000, 0.000000, 0.000000),
  70: (0.380000, 0.000000, 0.000000),
  71: (0.370000, 0.000000, 0.000000),
  72: (0.360000, 0.000000, 0.000000),
  73: (0.340000, 0.000000, 0.000000),
  74: (0.330000, 0.000000, 0.000000),
  75: (0.320000, 0.000000, 0.000000),
  76: (0.310000, 0.000000, 0.000000),
  77: (0.290000, 0.000000, 0.000000),
  78: (0.280000, 0.000000, 0.000000),
  79: (0.270000, 0.000000, 0.000000),
  80: (0.260000, 0.000000, 0.000000),
  81: (0.240000, 0.000000, 0.000000),
  82: (0.230000, 0.000000, 0.000000),
  83: (0.220000, 0.000000, 0.000000),
  84: (0.210000, 0.000000, 0.000000),
  85: (0.190000, 0.000000, 0.000000),
  86: (0.180000, 0.000000, 0.000000),
  87: (0.170000, 0.000000, 0.000000),
  88: (0.160000, 0.000000, 0.000000),
  89: (0.140000, 0.000000, 0.000000),
  90: (0.130000, 0.000000, 0.000000),
  91: (0.120000, 0.000000, 0.000000),
  92: (0.110000, 0.000000, 0.000000),
  93: (0.090000, 0.000000, 0.000000),
  94: (0.080000, 0.000000, 0.000000),
  95: (0.070000, 0.000000, 0.000000),
  96: (0.060000, 0.000000, 0.000000),
  97: (0.040000, 0.000000, 0.000000),
  98: (0.030000, 0.000000, 0.000000),
  99: (0.020000, 0.000000, 0.000000),
  100: (0.010000, 0.000000, 0.000000),}

elements_data = [
  (21, 0),
  (22, 21),
  (23, 22),
  (24, 23),
  (1, 24),
  (25, 1),
  (26, 25),
  (27, 26),
  (28, 27),
  (2, 28),
  (29, 2),
  (30, 29),
  (31, 30),
  (32, 31),
  (3, 32),
  (33, 3),
  (34, 33),
  (35, 34),
  (36, 35),
  (4, 36),
  (37, 4),
  (38, 37),
  (39, 38),
  (40, 39),
  (5, 40),
  (41, 5),
  (42, 41),
  (43, 42),
  (44, 43),
  (6, 44),
  (45, 6),
  (46, 45),
  (47, 46),
  (48, 47),
  (7, 48),
  (49, 7),
  (50, 49),
  (51, 50),
  (52, 51),
  (8, 52),
  (53, 8),
  (54, 53),
  (55, 54),
  (56, 55),
  (9, 56),
  (57, 9),
  (58, 57),
  (59, 58),
  (60, 59),
  (10, 60),
  (61, 10),
  (62, 61),
  (63, 62),
  (64, 63),
  (11, 64),
  (65, 11),
  (66, 65),
  (67, 66),
  (68, 67),
  (12, 68),
  (69, 12),
  (70, 69),
  (71, 70),
  (72, 71),
  (13, 72),
  (73, 13),
  (74, 73),
  (75, 74),
  (76, 75),
  (14, 76),
  (77, 14),
  (78, 77),
  (79, 78),
  (80, 79),
  (15, 80),
  (81, 15),
  (82, 81),
  (83, 82),
  (84, 83),
  (16, 84),
  (85, 16),
  (86, 85),
  (87, 86),
  (88, 87),
  (17, 88),
  (89, 17),
  (90, 89),
  (91, 90),
  (92, 91),
  (18, 92),
  (93, 18),
  (94, 93),
  (95, 94),
  (96, 95),
  (19, 96),
  (97, 19),
  (98, 97),
  (99, 98),
  (100, 99),
  (20, 100),]

nodes = {}
for nid, xyz in nodes_data.items():
    nodes[nid] = prt.add_node(Node(name=nid, xyz=xyz))

for node_ids in elements_data:
    n1 = nodes[node_ids[0]]
    n2 = nodes[node_ids[1]]
    prt.add_element(BeamElement(nodes=[n1, n2], section=section_beam1, frame=[1,1,1]))

loaded_nodes_coords =   [(0.050000, 0.000000, 0.000000),
  (0.100000, 0.000000, 0.000000),
  (0.150000, 0.000000, 0.000000),
  (0.200000, 0.000000, 0.000000),
  (0.250000, 0.000000, 0.000000),
  (0.300000, 0.000000, 0.000000),
  (0.350000, 0.000000, 0.000000),
  (0.400000, 0.000000, 0.000000),
  (0.450000, 0.000000, 0.000000),
  (0.500000, 0.000000, 0.000000),
  (0.550000, 0.000000, 0.000000),
  (0.600000, 0.000000, 0.000000),
  (0.650000, 0.000000, 0.000000),
  (0.700000, 0.000000, 0.000000),
  (0.750000, 0.000000, 0.000000),
  (0.800000, 0.000000, 0.000000),
  (0.850000, 0.000000, 0.000000),
  (0.900000, 0.000000, 0.000000),
  (0.950000, 0.000000, 0.000000),]

loaded_nodes = []
for coord in loaded_nodes_coords:
    n = prt.find_closest_nodes_to_point(coord, single=True)
    loaded_nodes.append(n)

left_n = prt.find_closest_nodes_to_point((0.0,0.0,0.0),single = True)
right_n = prt.find_closest_nodes_to_point((1.0,0.0,0.0),single = True)
mdl.add_fix_bc(nodes=[left_n,right_n])

# mdl.show(show_bcs=0.0001)

prb = mdl.add_problem(Problem(name="BeamSimpleAnalysis"))
stp = prb.add_step(StaticStep(name="StaticStep"))

stp.combination = LoadCombination.SLS()
stp.add_uniform_node_load(nodes=loaded_nodes, load_case="LL", x=0.0, y=0.0, z=1.0, xx=0.0, yy=0.0, zz=0.0)

stp.add_outputs([DisplacementFieldResults])
prb.analyse_and_extract(problems=[prb], path=os.path.join(TEMP, prb.name), Verbose=True)

stp.show_deformed(scale_results=10, show_original=0.1, show_bcs=0.00003, show_loads=0.001)
